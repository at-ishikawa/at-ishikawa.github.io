version: '3.3'

networks:
  db:
    driver: bridge

services:
  main:
    hostname: main
    build:
      context: .
    volumes:
#      - data:/var/lib/mysql:rw
      - ./main/my.cnf:/etc/my.cnf
      - ./main/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./main/load_test_db.sh:/docker-entrypoint-initdb.d/load_test_db.sh
      - ./test_db:/test_db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: test
    networks:
      - db

  read-replica-1:
    hostname: read-replica-1
    build:
      context: .
    volumes:
#      - data:/var/lib/mysql:rw
      - ./read-replica/my.cnf:/etc/my.cnf
      - ./read-replica/init.sh:/docker-entrypoint-initdb.d/init.sh
    environment:
      MYSQL_ROOT_PASSWORD: password
    command:
      - --server-id=11
    depends_on:
      - main
    networks:
      - db

  read-replica-2:
    hostname: read-replica-2
    build:
      context: .
    volumes:
#      - data:/var/lib/mysql:rw
      - ./read-replica/my.cnf:/etc/my.cnf
      - ./read-replica/init.sh:/docker-entrypoint-initdb.d/init.sh
    environment:
      MYSQL_ROOT_PASSWORD: password
    command:
      - --server-id=12
    depends_on:
      - main
    networks:
      - db

  orchestrator-mysql:
    build:
      context: .
    volumes:
      - ./orchestrator-mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      MYSQL_ROOT_PASSWORD: password
    networks:
      - db

  dockerize:
    image: jwilder/dockerize
    command:
      - -wait
      - tcp://main:3306
      - -wait
      - tcp://read-replica-1:3306
      - -wait
      - tcp://read-replica-2:3306
      - -wait
      - tcp://consul-server1:8500
      - -wait
      - tcp://consul-server2:8500
    depends_on:
      - main
      - read-replica-1
      - read-replica-2
      - orchestrator-mysql
      - consul-server1
      - consul-server2

  consul-server1:
    image: consul
    hostname: "consul-server1"
    networks:
      - db
    ports:
      - 8500:8500
      - 8600:8600
    volumes:
      - ./consul/server.json:/consul/config/server.json:ro
    command:
      - "agent"
      - "--retry-join"
      - "consul-server2"

  consul-server2:
    image: consul
    hostname: "consul-server2"
    networks:
      - db
    volumes:
      - ./consul/server.json:/consul/config/server.json:ro
    command:
      - "agent"
      - "--retry-join"
      - "consul-server2"

  consul-client:
    image: consul
    hostname: "consul-client"
    networks:
      - db
    command:
      - "agent"
      - "--retry-join"
      - "consul-server1"
      - "--retry-join"
      - "consul-server2"
    depends_on:
      - dockerize

  curl:
    image: curlimages/curl
    networks:
      - db
    volumes:
      - ./consul/db.json:/db.json
    command:
      - "-XPUT"
      - "--data"
      - "@/db.json"
      - "http://consul-server1:8500/v1/catalog/register"
    depends_on:
      - dockerize

volumes:
  data:
    driver: local
